#include<stdio.h>
#include<stdlib.h>


// Nó de uma lista ligada
// Fonte: http://www.ime.usp.br/~pf/algoritmos/aulas/lista.html
struct cel {
    int         conteudo;
    struct cel *prox;
};

struct cel2{
    int conteudo;
    struct cel2 *prox;
    struct cel2 *ant;
};


typedef struct cel celula;
typedef struct cel2 celula2;


// Cabeçalhos funções lista simples com cabeça
celula *cria_lista();
void insere(celula *, int);
void insere_fim(celula *, int);
int apaga(celula *);
void imprime(celula *);
void concatena(celula *, celula *);
void buscaremove(celula *, int);

// Cabeçalhos funções lista duplamente ligada circular com cabeça
celula2 *cria_lista2();
void insere2(celula2 *, int);
void buscaremove2(celula *, int);



int main() {

   celula *p = cria_lista();
   celula *l = cria_lista();

   insere_fim(p, 30);
   insere_fim(p, 10);
   insere_fim(p, 20);
   imprime(p);
   int k = apaga(p);
   imprime(p);

   return 0;
}


// Cria uma lista ligada (com cabeça) vazia.
// Devolve um ponteiro para a cabeça.
celula *cria_lista() {

   celula *c;
   c = malloc(sizeof(celula));
   c->prox = NULL;
   return c;

}


// Recebe uma lista com cabeça apontada por l
// Insere o inteiro  k na lista, imediatamente
// após a cabeça.
void insere(celula *l, int k){

   celula *nova;
   nova = malloc(sizeof(celula));
   nova->conteudo = k;
   nova->prox = l->prox;
   l->prox = nova;


}

void insere_fim(celula *l, int k) {

   celula *nova, *c;
   nova = malloc(sizeof(celula));
   nova->conteudo = k;
   nova->prox = NULL;

   c = l;
   while(c->prox != NULL)
      c = c->prox;

   c->prox = nova;

}

// Recebe uma lista com cabeça apontada por l
// Remove o nó imediatamente após a cabeça
// Devolve o conteúdo desse nó
// Supõe que a lista não está vazia
int apaga(celula *l) {

   celula *c;
   int k;

   c = l->prox;
   k = c->conteudo;
   l->prox = c->prox;
   free(c);
   return k;

}

void imprime(celula *l) {

   celula *c;
   c = l->prox;
   while(c != NULL) {
      printf("%d ", c->conteudo);
      c = c->prox;
   }
   printf("\n");

}

// Recebe listas com cabeça apontadas por l1 e l2
// Concatena a lista l2 (sem a cabeça) após a
// última célula de l1
// Desaloca a cabeça de l2.
void concatena(celula *l1, celula *l2) {

   celula *c = l1;
   while(c->prox != NULL)
       c = c->prox;

   c->prox = l2->prox;
   free(l2);

}


// Inicializa uma lista duplamente ligada
// circular com cabeça vazia
celula2 *cria_lista2() {

   celula2 *c;
   c = malloc(sizeof(celula2));
   c->prox = c;
   c->ant = c;
   return c;

}

void insere2(celula2 *l, int k) {

   celula2 *nova;
   nova = malloc(sizeof(celula2));
   nova->conteudo = k;
   nova->prox = l->prox;
   l->prox->ant = nova;
   nova->ant = l;
   l-prox = nova;

}
